// WebSocket handler for chat functionality
package handlers

import (
	"log"
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
	"your-project/internal/chat"
)

type WebSocketHandler struct {
	hub *chat.Hub
}

func NewWebSocketHandler(hub *chat.Hub) *WebSocketHandler {
	return &WebSocketHandler{
		hub: hub,
	}
}

// HandleWebSocket upgrades HTTP connection to WebSocket
func (h *WebSocketHandler) HandleWebSocket(c *gin.Context) {
	// Get user ID from authentication middleware
	userID, exists := c.Get("user_id")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
		return
	}

	// Upgrade HTTP connection to WebSocket
	conn, err := chat.upgrader.Upgrade(c.Writer, c.Request, nil)
	if err != nil {
		log.Printf("WebSocket upgrade error: %v", err)
		return
	}

	// Create new client
	client := &chat.Client{
		UserID: userID.(int),
		Conn:   conn,
		Send:   make(chan chat.WSMessage, 256),
		Hub:    h.hub,
	}

	// Register client with hub
	h.hub.register <- client

	// Start goroutines for reading and writing
	go client.writePump()
	go client.readPump()
}

// GetOnlineUsers returns list of online users
func (h *WebSocketHandler) GetOnlineUsers(c *gin.Context) {
	onlineUsers := h.hub.GetOnlineUsers()
	
	c.JSON(http.StatusOK, gin.H{
		"online_users": onlineUsers,
		"count":        len(onlineUsers),
	})
}

// SendMessage sends a message through WebSocket (alternative REST endpoint)
func (h *WebSocketHandler) SendMessage(c *gin.Context) {
	userID, exists := c.Get("user_id")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
		return
	}

	var req struct {
		ReceiverID int    `json:"receiver_id" binding:"required"`
		Content    string `json:"content" binding:"required"`
	}

	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// Create message
	message := chat.WSMessage{
		Type: chat.MessageTypeChat,
		Data: chat.ChatMessageData{
			SenderID:   userID.(int),
			ReceiverID: req.ReceiverID,
			Content:    req.Content,
			Timestamp:  chat.getCurrentTimestamp(),
		},
		Timestamp: chat.getCurrentTimestamp(),
	}

	// Send through WebSocket
	h.hub.SendToUser(req.ReceiverID, message)

	c.JSON(http.StatusOK, gin.H{"message": "Message sent"})
}