# Docker Compose Template for Docker Orchestration
# 学習課題: このテンプレートを参考に、完全なdocker-compose.ymlを実装してください

version: '3.8'

# =============================================================================
# Services Configuration
# =============================================================================

services:
  # ---------------------------------------------------------------------------
  # Frontend Services
  # ---------------------------------------------------------------------------
  
  # TODO: simple-crud-board フロントエンドサービスを実装
  # simple-crud-frontend:
  #   build:
  #     context: ./simple-crud-board/frontend
  #     dockerfile: Dockerfile.multi  # マルチステージDockerfileを使用
  #   container_name: simple-crud-frontend
  #   environment:
  #     - NODE_ENV=${NODE_ENV:-development}
  #     - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_CRUD_API_URL}
  #   networks:
  #     - app-network
  #   depends_on:
  #     - simple-crud-backend
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
  #     interval: ${HEALTH_CHECK_INTERVAL:-30s}
  #     timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
  #     retries: ${HEALTH_CHECK_RETRIES:-3}

  # TODO: user-authentication フロントエンドサービスを実装
  # user-auth-frontend:
  #   # 上記と同様の設定を実装

  # ---------------------------------------------------------------------------
  # Backend Services
  # ---------------------------------------------------------------------------
  
  # TODO: simple-crud-board バックエンドサービスを実装
  # simple-crud-backend:
  #   build:
  #     context: ./simple-crud-board/backend
  #     dockerfile: Dockerfile.multi  # マルチステージDockerfileを使用
  #   container_name: simple-crud-backend
  #   environment:
  #     - DB_HOST=${DB_HOST}
  #     - DB_PORT=${DB_PORT}
  #     - DB_USER=${DB_USER}
  #     - DB_PASSWORD=${DB_PASSWORD}
  #     - DB_NAME=${DB_NAME}
  #     - PORT=${CRUD_BACKEND_PORT}
  #     - GIN_MODE=${GIN_MODE:-debug}
  #   networks:
  #     - app-network
  #   depends_on:
  #     mysql:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
  #     interval: ${HEALTH_CHECK_INTERVAL:-30s}
  #     timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
  #     retries: ${HEALTH_CHECK_RETRIES:-3}

  # TODO: user-authentication バックエンドサービスを実装
  # user-auth-backend:
  #   # 上記と同様の設定を実装
  #   # 追加の環境変数:
  #   # - JWT_SECRET=${JWT_SECRET}
  #   # - SESSION_SECRET=${SESSION_SECRET}

  # ---------------------------------------------------------------------------
  # Infrastructure Services
  # ---------------------------------------------------------------------------
  
  # TODO: Caddyリバースプロキシサービスを実装
  # caddy:
  #   image: caddy:2-alpine
  #   container_name: caddy-proxy
  #   ports:
  #     - "${CADDY_HTTP_PORT:-80}:80"
  #     - "${CADDY_HTTPS_PORT:-443}:443"
  #   volumes:
  #     - ./caddy/Caddyfile:/etc/caddy/Caddyfile:ro
  #     - caddy_data:/data
  #     - caddy_config:/config
  #   networks:
  #     - app-network
  #   depends_on:
  #     - simple-crud-frontend
  #     - user-auth-frontend
  #     - simple-crud-backend
  #     - user-auth-backend
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "caddy", "version"]
  #     interval: ${HEALTH_CHECK_INTERVAL:-30s}
  #     timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
  #     retries: ${HEALTH_CHECK_RETRIES:-3}

  # TODO: MySQLデータベースサービスを実装
  # mysql:
  #   image: mysql:8.0
  #   container_name: mysql-db
  #   environment:
  #     - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
  #     - MYSQL_DATABASE=${MYSQL_DATABASE}
  #     - MYSQL_USER=${MYSQL_USER}
  #     - MYSQL_PASSWORD=${MYSQL_PASSWORD}
  #   ports:
  #     - "${DB_PORT:-3306}:3306"
  #   volumes:
  #     - mysql_data:/var/lib/mysql
  #     - ./database/init:/docker-entrypoint-initdb.d:ro
  #   networks:
  #     - app-network
  #   restart: unless-stopped
  #   command: --default-authentication-plugin=mysql_native_password
  #   healthcheck:
  #     test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 30s

# =============================================================================
# Networks Configuration
# =============================================================================

# TODO: ネットワーク設定を実装
# networks:
#   app-network:
#     driver: bridge
#     name: ${NETWORK_NAME:-docker-orchestration-network}
#     ipam:
#       config:
#         - subnet: ${NETWORK_SUBNET:-172.20.0.0/16}

# =============================================================================
# Volumes Configuration
# =============================================================================

# TODO: ボリューム設定を実装
# volumes:
#   mysql_data:
#     driver: local
#     name: ${MYSQL_VOLUME:-docker-orchestration-mysql-data}
#   
#   caddy_data:
#     driver: local
#     name: ${CADDY_DATA_VOLUME:-docker-orchestration-caddy-data}
#     
#   caddy_config:
#     driver: local
#     name: ${CADDY_CONFIG_VOLUME:-docker-orchestration-caddy-config}

# =============================================================================
# Implementation Notes
# =============================================================================

# 実装のポイント:
# 1. 環境変数を適切に使用する
# 2. サービス間の依存関係を正しく設定する
# 3. ヘルスチェックを全サービスに実装する
# 4. ネットワークとボリュームを適切に設定する
# 5. セキュリティを考慮した設定を行う

# 高度な設定:
# - リソース制限 (deploy.resources)
# - ログ設定 (logging)
# - 再起動ポリシー (restart)
# - セキュリティオプション (security_opt)

# 参考資料:
# - Docker Compose file reference: https://docs.docker.com/compose/compose-file/
# - Best practices: https://docs.docker.com/develop/dev-best-practices/