// Package handlers contains HTTP request handlers
// 学習課題: このテンプレートを参考に、完全なPostHandlerを実装してください
package handlers

import (
	"net/http"
	"strconv"
	"docker-orchestration/simple-crud-board/backend/internal/application/services"
	"github.com/gin-gonic/gin"
)

// PostHandler handles HTTP requests for posts
// TODO: PostHandlerを完全に実装してください
type PostHandler struct {
	// TODO: 依存関係を定義
	// postService *services.PostService
}

// TODO: コンストラクタを実装
// NewPostHandler creates a new PostHandler
// func NewPostHandler(postService *services.PostService) *PostHandler {
//     return &PostHandler{
//         postService: postService,
//     }
// }

// TODO: リクエスト・レスポンス構造体を定義
// CreatePostRequest represents the request body for creating a post
// type CreatePostRequest struct {
//     Content string `json:"content" binding:"required"`
// }

// UpdatePostRequest represents the request body for updating a post
// type UpdatePostRequest struct {
//     Content string `json:"content" binding:"required"`
// }

// PostResponse represents the response body for a post
// type PostResponse struct {
//     ID        int    `json:"id"`
//     Content   string `json:"content"`
//     UserID    int    `json:"user_id"`
//     CreatedAt string `json:"created_at"`
//     UpdatedAt string `json:"updated_at"`
// }

// ErrorResponse represents an error response
// type ErrorResponse struct {
//     Error   string `json:"error"`
//     Message string `json:"message,omitempty"`
// }

// TODO: 投稿作成ハンドラーを実装
// CreatePost handles POST /api/posts
// func (h *PostHandler) CreatePost(c *gin.Context) {
//     var req CreatePostRequest
//     if err := c.ShouldBindJSON(&req); err != nil {
//         c.JSON(http.StatusBadRequest, ErrorResponse{
//             Error:   "Invalid request body",
//             Message: err.Error(),
//         })
//         return
//     }
//     
//     // ユーザーIDをコンテキストから取得（認証ミドルウェアで設定）
//     userID, exists := c.Get("user_id")
//     if !exists {
//         c.JSON(http.StatusUnauthorized, ErrorResponse{
//             Error: "User not authenticated",
//         })
//         return
//     }
//     
//     // サービス層を呼び出し
//     post, err := h.postService.CreatePost(c.Request.Context(), userID.(int), req.Content)
//     if err != nil {
//         c.JSON(http.StatusInternalServerError, ErrorResponse{
//             Error:   "Failed to create post",
//             Message: err.Error(),
//         })
//         return
//     }
//     
//     // レスポンスを返す
//     response := PostResponse{
//         ID:        post.ID,
//         Content:   post.Content,
//         UserID:    post.UserID,
//         CreatedAt: post.CreatedAt.Format("2006-01-02T15:04:05Z"),
//         UpdatedAt: post.UpdatedAt.Format("2006-01-02T15:04:05Z"),
//     }
//     
//     c.JSON(http.StatusCreated, response)
// }

// TODO: 投稿取得ハンドラーを実装
// GetPost handles GET /api/posts/:id
// func (h *PostHandler) GetPost(c *gin.Context) {
//     idParam := c.Param("id")
//     id, err := strconv.Atoi(idParam)
//     if err != nil {
//         c.JSON(http.StatusBadRequest, ErrorResponse{
//             Error:   "Invalid post ID",
//             Message: "Post ID must be a number",
//         })
//         return
//     }
//     
//     post, err := h.postService.GetPost(c.Request.Context(), id)
//     if err != nil {
//         if strings.Contains(err.Error(), "not found") {
//             c.JSON(http.StatusNotFound, ErrorResponse{
//                 Error: "Post not found",
//             })
//             return
//         }
//         
//         c.JSON(http.StatusInternalServerError, ErrorResponse{
//             Error:   "Failed to get post",
//             Message: err.Error(),
//         })
//         return
//     }
//     
//     response := PostResponse{
//         ID:        post.ID,
//         Content:   post.Content,
//         UserID:    post.UserID,
//         CreatedAt: post.CreatedAt.Format("2006-01-02T15:04:05Z"),
//         UpdatedAt: post.UpdatedAt.Format("2006-01-02T15:04:05Z"),
//     }
//     
//     c.JSON(http.StatusOK, response)
// }

// TODO: 投稿一覧取得ハンドラーを実装
// GetPosts handles GET /api/posts
// func (h *PostHandler) GetPosts(c *gin.Context) {
//     // クエリパラメータの取得
//     offsetParam := c.DefaultQuery("offset", "0")
//     limitParam := c.DefaultQuery("limit", "20")
//     
//     offset, err := strconv.Atoi(offsetParam)
//     if err != nil {
//         c.JSON(http.StatusBadRequest, ErrorResponse{
//             Error:   "Invalid offset parameter",
//             Message: "Offset must be a number",
//         })
//         return
//     }
//     
//     limit, err := strconv.Atoi(limitParam)
//     if err != nil {
//         c.JSON(http.StatusBadRequest, ErrorResponse{
//             Error:   "Invalid limit parameter",
//             Message: "Limit must be a number",
//         })
//         return
//     }
//     
//     posts, err := h.postService.GetAllPosts(c.Request.Context(), offset, limit)
//     if err != nil {
//         c.JSON(http.StatusInternalServerError, ErrorResponse{
//             Error:   "Failed to get posts",
//             Message: err.Error(),
//         })
//         return
//     }
//     
//     // レスポンスの構築
//     var responses []PostResponse
//     for _, post := range posts {
//         responses = append(responses, PostResponse{
//             ID:        post.ID,
//             Content:   post.Content,
//             UserID:    post.UserID,
//             CreatedAt: post.CreatedAt.Format("2006-01-02T15:04:05Z"),
//             UpdatedAt: post.UpdatedAt.Format("2006-01-02T15:04:05Z"),
//         })
//     }
//     
//     c.JSON(http.StatusOK, gin.H{
//         "posts":  responses,
//         "offset": offset,
//         "limit":  limit,
//         "count":  len(responses),
//     })
// }

// TODO: 投稿更新ハンドラーを実装
// UpdatePost handles PUT /api/posts/:id
// func (h *PostHandler) UpdatePost(c *gin.Context) {
//     idParam := c.Param("id")
//     id, err := strconv.Atoi(idParam)
//     if err != nil {
//         c.JSON(http.StatusBadRequest, ErrorResponse{
//             Error:   "Invalid post ID",
//             Message: "Post ID must be a number",
//         })
//         return
//     }
//     
//     var req UpdatePostRequest
//     if err := c.ShouldBindJSON(&req); err != nil {
//         c.JSON(http.StatusBadRequest, ErrorResponse{
//             Error:   "Invalid request body",
//             Message: err.Error(),
//         })
//         return
//     }
//     
//     // ユーザーIDをコンテキストから取得
//     userID, exists := c.Get("user_id")
//     if !exists {
//         c.JSON(http.StatusUnauthorized, ErrorResponse{
//             Error: "User not authenticated",
//         })
//         return
//     }
//     
//     post, err := h.postService.UpdatePost(c.Request.Context(), id, userID.(int), req.Content)
//     if err != nil {
//         if strings.Contains(err.Error(), "unauthorized") {
//             c.JSON(http.StatusForbidden, ErrorResponse{
//                 Error: "Unauthorized to update this post",
//             })
//             return
//         }
//         
//         if strings.Contains(err.Error(), "not found") {
//             c.JSON(http.StatusNotFound, ErrorResponse{
//                 Error: "Post not found",
//             })
//             return
//         }
//         
//         c.JSON(http.StatusInternalServerError, ErrorResponse{
//             Error:   "Failed to update post",
//             Message: err.Error(),
//         })
//         return
//     }
//     
//     response := PostResponse{
//         ID:        post.ID,
//         Content:   post.Content,
//         UserID:    post.UserID,
//         CreatedAt: post.CreatedAt.Format("2006-01-02T15:04:05Z"),
//         UpdatedAt: post.UpdatedAt.Format("2006-01-02T15:04:05Z"),
//     }
//     
//     c.JSON(http.StatusOK, response)
// }

// TODO: 投稿削除ハンドラーを実装
// DeletePost handles DELETE /api/posts/:id
// func (h *PostHandler) DeletePost(c *gin.Context) {
//     idParam := c.Param("id")
//     id, err := strconv.Atoi(idParam)
//     if err != nil {
//         c.JSON(http.StatusBadRequest, ErrorResponse{
//             Error:   "Invalid post ID",
//             Message: "Post ID must be a number",
//         })
//         return
//     }
//     
//     // ユーザーIDをコンテキストから取得
//     userID, exists := c.Get("user_id")
//     if !exists {
//         c.JSON(http.StatusUnauthorized, ErrorResponse{
//             Error: "User not authenticated",
//         })
//         return
//     }
//     
//     err = h.postService.DeletePost(c.Request.Context(), id, userID.(int))
//     if err != nil {
//         if strings.Contains(err.Error(), "unauthorized") {
//             c.JSON(http.StatusForbidden, ErrorResponse{
//                 Error: "Unauthorized to delete this post",
//             })
//             return
//         }
//         
//         if strings.Contains(err.Error(), "not found") {
//             c.JSON(http.StatusNotFound, ErrorResponse{
//                 Error: "Post not found",
//             })
//             return
//         }
//         
//         c.JSON(http.StatusInternalServerError, ErrorResponse{
//             Error:   "Failed to delete post",
//             Message: err.Error(),
//         })
//         return
//     }
//     
//     c.JSON(http.StatusNoContent, nil)
// }

// TODO: ユーザー投稿取得ハンドラーを実装
// GetUserPosts handles GET /api/users/:user_id/posts
// func (h *PostHandler) GetUserPosts(c *gin.Context) {
//     userIDParam := c.Param("user_id")
//     userID, err := strconv.Atoi(userIDParam)
//     if err != nil {
//         c.JSON(http.StatusBadRequest, ErrorResponse{
//             Error:   "Invalid user ID",
//             Message: "User ID must be a number",
//         })
//         return
//     }
//     
//     posts, err := h.postService.GetUserPosts(c.Request.Context(), userID)
//     if err != nil {
//         if strings.Contains(err.Error(), "not found") {
//             c.JSON(http.StatusNotFound, ErrorResponse{
//                 Error: "User not found",
//             })
//             return
//         }
//         
//         c.JSON(http.StatusInternalServerError, ErrorResponse{
//             Error:   "Failed to get user posts",
//             Message: err.Error(),
//         })
//         return
//     }
//     
//     var responses []PostResponse
//     for _, post := range posts {
//         responses = append(responses, PostResponse{
//             ID:        post.ID,
//             Content:   post.Content,
//             UserID:    post.UserID,
//             CreatedAt: post.CreatedAt.Format("2006-01-02T15:04:05Z"),
//             UpdatedAt: post.UpdatedAt.Format("2006-01-02T15:04:05Z"),
//         })
//     }
//     
//     c.JSON(http.StatusOK, gin.H{
//         "posts":   responses,
//         "user_id": userID,
//         "count":   len(responses),
//     })
// }

// TODO: ヘルスチェックハンドラーを実装
// HealthCheck handles GET /health
// func (h *PostHandler) HealthCheck(c *gin.Context) {
//     c.JSON(http.StatusOK, gin.H{
//         "status":    "healthy",
//         "service":   "post-service",
//         "timestamp": time.Now().Format("2006-01-02T15:04:05Z"),
//     })
// }

// 実装のヒント:
// 1. 適切なHTTPステータスコードを使用
// 2. バリデーションエラーを適切に処理
// 3. 認証・認可チェックを実装
// 4. エラーレスポンスを統一
// 5. ログ出力を適切に行う

// セキュリティ考慮事項:
// - 入力値の検証
// - 認証トークンの検証
// - 認可チェック
// - レート制限
// - CORS設定

// パフォーマンス考慮事項:
// - ページネーション
// - 適切なキャッシュヘッダー
// - レスポンスサイズの最適化