# LambdaÈñ¢Êï∞„ÅÆ„Éì„É´„Éâ„Å®„Éë„ÉÉ„Ç±„Éº„Ç∏„É≥„Ç∞Áî®Makefile
#
# üéØ Â≠¶Áøí„Éù„Ç§„É≥„Éà:
# - GoË®ÄË™û„Åß„ÅÆ„ÇØ„É≠„Çπ„Ç≥„É≥„Éë„Ç§„É´ÔºàLinux AMD64Ôºâ
# - LambdaÁî®„ÅÆZIP„Éë„ÉÉ„Ç±„Éº„Ç∏‰ΩúÊàê
# - Áí∞Â¢ÉÂ§âÊï∞„Å®„Éì„É´„Éâ„Ç™„Éó„Ç∑„Éß„É≥„ÅÆÁÆ°ÁêÜ

# Â§âÊï∞ÂÆöÁæ©
BINARY_NAME=bootstrap
PACKAGE_NAME=lambda-deployment.zip
BUILD_DIR=bin
LAMBDA_DIR=.

# „Éá„Éï„Ç©„É´„Éà„Çø„Éº„Ç≤„ÉÉ„Éà
.PHONY: all
all: clean build package

# „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
.PHONY: clean
clean:
	@echo "Cleaning up..."
	# TODO: „Éì„É´„Éâ„Éá„Ç£„É¨„ÇØ„Éà„É™„Å®ZIP„Éï„Ç°„Ç§„É´„ÇíÂâäÈô§
	rm -rf $(BUILD_DIR)
	rm -f $(PACKAGE_NAME)
	@echo "Cleanup completed"

# ‰æùÂ≠òÈñ¢‰øÇ„ÅÆÊõ¥Êñ∞
.PHONY: deps
deps:
	@echo "Updating dependencies..."
	# TODO: Go modules„ÅÆ‰æùÂ≠òÈñ¢‰øÇ„ÇíÊõ¥Êñ∞
	go mod tidy
	go mod download
	@echo "Dependencies updated"

# Linux AMD64Áî®„ÅÆ„Éì„É´„ÉâÔºàLambdaÁí∞Â¢ÉÁî®Ôºâ
.PHONY: build
build: deps
	@echo "Building Lambda function for Linux AMD64..."
	# TODO: „Éì„É´„Éâ„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
	mkdir -p $(BUILD_DIR)
	
	# TODO: Linux AMD64Áî®„Å´„ÇØ„É≠„Çπ„Ç≥„É≥„Éë„Ç§„É´
	# „Éí„É≥„Éà: GOOS=linux GOARCH=amd64 CGO_ENABLED=0
	# LambdaÈñ¢Êï∞Âêç„ÅØ "bootstrap" „Åæ„Åü„ÅØ "main" „Å´„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã
	GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build \
		-ldflags="-s -w" \
		-o $(BUILD_DIR)/$(BINARY_NAME) \
		cmd/main.go
	
	@echo "Build completed: $(BUILD_DIR)/$(BINARY_NAME)"

# „É≠„Éº„Ç´„É´Áí∞Â¢ÉÁî®„ÅÆ„Éì„É´„ÉâÔºà„ÉÜ„Çπ„ÉàÁî®Ôºâ
.PHONY: build-local
build-local: deps
	@echo "Building for local environment..."
	mkdir -p $(BUILD_DIR)
	
	# TODO: „É≠„Éº„Ç´„É´Áí∞Â¢ÉÁî®„ÅÆ„Éì„É´„Éâ
	go build -o $(BUILD_DIR)/main-local cmd/main.go
	
	@echo "Local build completed: $(BUILD_DIR)/main-local"

# LambdaÁî®ZIP„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆ‰ΩúÊàê
.PHONY: package
package: build
	@echo "Creating Lambda deployment package..."
	
	# TODO: ZIP„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê
	# LambdaÈñ¢Êï∞„ÅÆ„Éê„Ç§„Éä„É™„ÇíZIP„Å´ÂúßÁ∏Æ
	cd $(BUILD_DIR) && zip -r ../$(PACKAGE_NAME) $(BINARY_NAME)
	
	@echo "Package created: $(PACKAGE_NAME)"
	@echo "Package size: $$(du -h $(PACKAGE_NAME) | cut -f1)"

# „ÉÜ„Çπ„Éà„ÅÆÂÆüË°å
.PHONY: test
test:
	@echo "Running tests..."
	# TODO: „É¶„Éã„ÉÉ„Éà„ÉÜ„Çπ„Éà„ÇíÂÆüË°å
	go test -v ./...
	@echo "Tests completed"

# „ÉÜ„Çπ„Éà„Ç´„Éê„É¨„ÉÉ„Ç∏„ÅÆÁ¢∫Ë™ç
.PHONY: test-coverage
test-coverage:
	@echo "Running tests with coverage..."
	# TODO: „Ç´„Éê„É¨„ÉÉ„Ç∏‰ªò„Åç„Åß„ÉÜ„Çπ„Éà„ÇíÂÆüË°å
	go test -v -coverprofile=coverage.out ./...
	go tool cover -html=coverage.out -o coverage.html
	@echo "Coverage report generated: coverage.html"

# „Ç≥„Éº„Éâ„ÅÆÈùôÁöÑËß£Êûê
.PHONY: lint
lint:
	@echo "Running linter..."
	# TODO: golangci-lint„ÇíÂÆüË°åÔºà„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥ÂêàÔºâ
	@if command -v golangci-lint >/dev/null 2>&1; then \
		golangci-lint run; \
	else \
		echo "golangci-lint not installed, running go vet instead"; \
		go vet ./...; \
	fi
	@echo "Linting completed"

# „Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÅÆÁ¢∫Ë™ç„Å®‰øÆÊ≠£
.PHONY: fmt
fmt:
	@echo "Formatting code..."
	# TODO: „Ç≥„Éº„Éâ„Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÇíÂÆüË°å
	go fmt ./...
	@echo "Formatting completed"

# LambdaÈñ¢Êï∞„ÅÆ„É≠„Éº„Ç´„É´ÂÆüË°åÔºàSAM CLI‰ΩøÁî®Ôºâ
.PHONY: run-local
run-local: build-local
	@echo "Starting local Lambda function..."
	# TODO: SAM CLI„Åß„É≠„Éº„Ç´„É´ÂÆüË°åÔºàsam-local.yaml„ÅåÂøÖË¶ÅÔºâ
	@if command -v sam >/dev/null 2>&1; then \
		sam local start-api; \
	else \
		echo "SAM CLI not installed. Please install SAM CLI for local testing."; \
		echo "Running binary directly (not recommended for Lambda testing):"; \
		./$(BUILD_DIR)/main-local; \
	fi

# AWS LambdaÈñ¢Êï∞„ÅÆÊõ¥Êñ∞ÔºàÊâãÂãï„Éá„Éó„É≠„Ç§Áî®Ôºâ
.PHONY: deploy
deploy: package
	@echo "Deploying Lambda function..."
	# TODO: AWS CLI„ÅßLambdaÈñ¢Êï∞„ÇíÊõ¥Êñ∞
	# Ê≥®ÊÑè: ÂÆüÈöõ„ÅÆ„Éá„Éó„É≠„Ç§„ÅØCI/CD„Éë„Ç§„Éó„É©„Ç§„É≥„ÅßË°å„ÅÜ„Åì„Å®„ÇíÊé®Â•®
	@if [ -z "$(FUNCTION_NAME)" ]; then \
		echo "Error: FUNCTION_NAME environment variable is required"; \
		echo "Usage: make deploy FUNCTION_NAME=your-function-name"; \
		exit 1; \
	fi
	
	aws lambda update-function-code \
		--function-name $(FUNCTION_NAME) \
		--zip-file fileb://$(PACKAGE_NAME)
	
	@echo "Deployment completed for function: $(FUNCTION_NAME)"

# ÈñãÁô∫Áî®„ÅÆÁõ£Ë¶ñ„É¢„Éº„ÉâÔºà„Éï„Ç°„Ç§„É´Â§âÊõ¥ÊôÇ„Å´Ëá™Âãï„Éì„É´„ÉâÔºâ
.PHONY: watch
watch:
	@echo "Starting watch mode..."
	# TODO: „Éï„Ç°„Ç§„É´Â§âÊõ¥Áõ£Ë¶ñÔºàfswatchÁ≠â„ÅÆ„ÉÑ„Éº„É´„ÅåÂøÖË¶ÅÔºâ
	@if command -v fswatch >/dev/null 2>&1; then \
		fswatch -o . | xargs -n1 -I{} make build; \
	else \
		echo "fswatch not installed. Please install fswatch for watch mode."; \
		echo "Alternatively, manually run 'make build' when files change."; \
	fi

# „Éò„É´„Éó„ÅÆË°®Á§∫
.PHONY: help
help:
	@echo "Available targets:"
	@echo "  all          - Clean, build, and package (default)"
	@echo "  clean        - Remove build artifacts"
	@echo "  deps         - Update Go dependencies"
	@echo "  build        - Build Lambda function for Linux AMD64"
	@echo "  build-local  - Build for local environment"
	@echo "  package      - Create Lambda deployment ZIP"
	@echo "  test         - Run unit tests"
	@echo "  test-coverage- Run tests with coverage report"
	@echo "  lint         - Run static code analysis"
	@echo "  fmt          - Format Go code"
	@echo "  run-local    - Run Lambda function locally (requires SAM CLI)"
	@echo "  deploy       - Deploy to AWS Lambda (requires FUNCTION_NAME)"
	@echo "  watch        - Watch for file changes and auto-build"
	@echo "  help         - Show this help message"
	@echo ""
	@echo "Examples:"
	@echo "  make build"
	@echo "  make deploy FUNCTION_NAME=my-lambda-function"
	@echo "  make test-coverage"